[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "AutoRAG"
authors = [
    { name = "Marker-Inc", email = "vkehfdl1@gmail.com" }
]
description = 'Automatically Evaluate RAG pipelines with your own data. Find optimal structure for new RAG product.'
readme = "README.md"
requires-python = ">=3.10"
keywords = ['RAG', 'AutoRAG', 'autorag', 'rag-evaluation', 'evaluation', 'rag-auto', 'AutoML', 'AutoML-RAG']
license = { file = "LICENSE" }
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
urls = { Homepage = "https://github.com/Marker-Inc-Korea/AutoRAG" }
dynamic = ["version"]
dependencies = [
    "pydantic==2.9.2",  # incompatible with llama index
    "numpy==1.26.4",  # temporal not using numpy 2.0.0
    "pandas>=2.2.3",
    "tqdm>=4.67.1",
    "tiktoken>=0.9.0",  # for counting token
    "openai>=1.90.0",
    "rank_bm25>=0.2.2",  # for bm25 retrieval
    "pyyaml>=6.0.2",  # for yaml file
    "pyarrow>=20.0.0",  # for pandas with parquet
    "fastparquet>=2024.11.0",  # for pandas with parquet
    "sacrebleu>=2.5.1",  # for bleu score
    "evaluate>=0.4.4",  # for meteor and other scores
    "rouge_score>=0.1.2",  # for rouge score
    "rich>=14.0.0",  # for pretty logging
    "click>=8.2.1",  # for cli
    "cohere>=5.8.0",  # for cohere services
    "tokenlog>=0.0.2",  # for token logging
    "aiohttp>=3.12.13",  # for async http requests
    "voyageai>=0.3.2",  # for voyageai reranker
    "mixedbread-ai>=2.2.6",  # for mixedbread-ai reranker
    "scikit-learn>=1.7.0",
    "emoji>=2.14.1",
    "fastapi>=0.115.13",
    "banks>=2.1.2",
    "grpcio>=1.66.2,<1.68.0",
"grpcio-health-checking>=1.66.2,<1.68.0",
"grpcio-status>=1.66.2,<1.68.0",
"grpcio-tools>=1.66.2,<1.68.0",

    # Vector DB
    "pymilvus>=2.6.0b0",  # for using milvus vectordb
    "chromadb>=1.0.0",  # for chroma vectordb
    "weaviate-client>=4.15.2",  # for weaviate vectordb
    "pinecone[grpc]",  # for pinecone vectordb
    "couchbase>=4.4.0",  # for couchbase vectordb
    "qdrant-client>=1.12.1",  # for qdrant vectordb

    # API server
    "quart>=0.20.0",
    "pyngrok>=7.2.11",

    # LlamaIndex
    "llama-index>=0.12.42",
    "llama-index-core>=0.12.42",
    "llama-index-readers-file>=0.4.9",
    "llama-index-embeddings-openai>=0.3.1",
    "llama-index-embeddings-ollama>=0.6.0",
    "llama-index-embeddings-openai-like>=0.1.1",
    "llama-index-llms-openai>=0.4.7",
    "llama-index-llms-openai-like>=0.4.0",
    "llama-index-retrievers-bm25>=0.5.2",
    "llama-index-llms-bedrock>=0.3.8",

    # WebUI
    "streamlit>=1.46.0",
    "gradio>=5.34.2",

    # Langchain
    "langchain-core==0.2.43",
    "langchain-unstructured==0.1.2",
    "langchain-upstage==0.1.5",
    "langchain-community==0.2.19",
    "langsmith==0.1.147",

    # autorag dashboard
    "panel>=1.7.1",
    "seaborn>=0.13.2",
    "ipykernel>=6.29.5",
    "ipywidgets>=8.1.7",
    "ipywidgets_bokeh>=1.6.0",
]


[tool.poetry]
name = "AutoRAG"
version = "0.0.2" #initial version
description = "Automatically Evaluate RAG pipelines with your own data. Find optimal structure for new RAG product."
authors = ["Marker-Inc <vkehfdl1@gmail.com>"]

[tool.setuptools.dynamic]
version = { file = ["autorag/VERSION"] }

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["autorag*"]
exclude = ["tests"]

[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
addopts = ["--import-mode=importlib"] # default is prepend

[dependency-groups]
dev = [
    "ruff",
    "pre-commit",
    "pytest",
    "pytest-env",
    "pytest-xdist",
    "pytest-asyncio",
    "aioresponses",
    "asyncstdlib",
]

[project.optional-dependencies]
ko = ["kiwipiepy >= 0.18.0", "konlpy>=0.6.0"]
parse = ["PyMuPDF>=1.26.1", "pdfminer.six>=20250506", "pdfplumber>=0.11.7", "jq>=1.9.1", "unstructured[pdf]>=0.17.2", "PyPDF2==2.12.1", "pdf2image>=1.17.0"]
ja = ["sudachipy>=0.6.8", "sudachidict_core"]
gpu = ["torch>=2.7.1", "sentencepiece>=0.2.0", "bert_score>=0.3.13", "optimum[openvino,nncf]>=1.26.1", "peft>=0.15.2", "llmlingua>=0.2.2", "FlagEmbedding>=1.2.11",
    "sentence-transformers>=4.1.0", "transformers>=4.51.3", "llama-index-llms-ollama>=0.6.0", "llama-index-embeddings-huggingface>=0.5.4",
    "llama-index-llms-huggingface>=0.5.0", "onnxruntime>=1.22.0"]
all = ["AutoRAG[gpu]", "AutoRAG[ko]", "AutoRAG[parse]", "AutoRAG[ja]"]

[project.entry-points.console_scripts]
autorag = "autorag.cli:cli"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["E722", "F821"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["B"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]
"**/{docs}/*" = ["E402", "F401"]
"test_*.py" = ["F401", "F811"]
"*_test.py" = ["F401", "F811"]
"resources/parse_data/*" = ["W292"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "tab"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
